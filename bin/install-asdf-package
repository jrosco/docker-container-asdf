#!/usr/bin/env bash

# # Usage:
# # Add following formats to as list $ASDF_PACKAGES="package_name:version:default"
#
# Add plugin and don't install
# terraform
#
# # Install latest version of terraform
# terraform:latest:set <- set as default
# terraform:latest
#
# # Install certain version of terraform
# terraform:0.12.24:set <- set as default
# terraform:0.12.24

set -euo pipefail

# Check if ASDF is installed and accessible
if ! asdf_cli=$(command -v asdf); then
    echo "ASDF is not installed or not found in the PATH. Please install ASDF." >&2
    exit 1
fi

# Convert the space-separated string into an array using IFS (Internal Field Separator)
IFS=' ' read -r -a PACKAGES <<<"$ASDF_PACKAGES"

# Function to install a package with a specific version or the latest if not provided
install_package() {
    local package_name=$1
    local package_version=${2:-}
    local default_package=${3:-}

    if [ ! -d "$HOME/.asdf/plugins/$package_name" ]; then
        "$asdf_cli" plugin add "$package_name"
    fi

    if [ -n "$package_version" ]; then
        echo "Installing $package_name:$package_version toolset"

        if [ "$package_version" = "all" ]; then
            available_versions=$("$asdf_cli" list all "$package_name")
            for v in $available_versions; do
                "$asdf_cli" install "$package_name" "$v"
            done
        else
            if "$asdf_cli" install "$package_name" "$package_version"; then
                echo "Installed $package_name version $package_version successfully"
            else
                echo "Failed to install $package_name version $package_version" >&2
            fi
        fi

        if [ "$default_package" == "set" ]; then
            "$asdf_cli" set "$package_name" "$package_version" || echo "setting $package_name:$package_version failed"
        fi
    fi
}

# If ASDF_DEFAULT_TOOL_VERSIONS_FILENAME is found Loop over and install packages
tool_versions=$(asdf info | grep ASDF_DEFAULT_TOOL_VERSIONS_FILENAME | cut -d= -f2)
if [ -f "$tool_versions" ]; then
    while read -r line; do
        package_name=$(echo "$line" | awk '{print $1}')
        package_version=$(echo "$line" | awk '{print $2}')
        default_package=""
        install_package "$package_name" "$package_version" "$default_package"
    done <"$tool_versions"
fi

# Loop through each plugin in the PACKAGES array
for package in "${PACKAGES[@]}"; do
    if [[ $package == *":"* ]]; then
        IFS=':' read -r package_name package_version default_package <<<"$package"
    else
        package_name=$package
        package_version=""
        default_package=""
    fi
    install_package "$package_name" "$package_version" "$default_package"
done
