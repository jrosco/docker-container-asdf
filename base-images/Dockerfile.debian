# Define base images as build arguments (allow customization in CI/CD pipelines)
ARG go_build_version="golang:bookworm"
ARG debian_image="debian:bookworm-slim"

# ---- Build Stage ----
FROM $go_build_version AS builder

# Set working directory inside the container
WORKDIR /go

# Define ASDF version (must be set when building a derived image)
ARG asdf_version=""

# Build ASDF Go binary (ASDF is a Go-based CLI tool)
RUN go install github.com/asdf-vm/asdf/cmd/asdf@$asdf_version

# ---- Final Stage (Minimal Runtime Image) ----
FROM $debian_image

# Update package list and install required runtime dependencies
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    git curl bash unzip ca-certificates && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Refresh the CA certificates
RUN update-ca-certificates

# Create a non-root user to improve security
RUN adduser --shell /bin/bash --home /asdf --disabled-password asdf

# Set ASDF-related environment variables (ensures proper path resolution)
ENV PATH="${PATH}:/asdf/.asdf/shims:/asdf/.asdf/bin"

# Switch to non-root user
USER asdf
WORKDIR /asdf

# Copy helper scripts for ASDF package management
COPY ../bin/install-asdf-package /init/
COPY ../bin/manage-toolset-versions /usr/local/bin/

# Copy the ASDF binary from the builder stage
COPY --from=builder /go/bin/asdf /usr/local/bin/asdf

# ---- ONBUILD Instructions ----
# These will be executed only when another Dockerfile extends this base image

# Accept a list of ASDF packages to install in derived images
ONBUILD ARG packages=""
ONBUILD ENV ASDF_PACKAGES=$packages

# Copy .tool-versions if it exist on build
ONBUILD COPY --chown=asdf:asdf *.tool-versions /asdf/

# Ensure ASDF packages are installed when the derived image is built
ONBUILD USER asdf
ONBUILD RUN bash /init/install-asdf-package
