{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#current-versions","title":"Current versions","text":""},{"location":"#docker-latest-builds","title":"Docker Latest Builds","text":""},{"location":"#asdf-vm-base-images","title":"<code>asdf-vm</code> base images","text":"<p>Works with asdf <code>&gt;=0.16.0</code></p> <p>This repository contains base Docker images tailored for the versatile version manager tool, <code>asdf-vm</code>. These base images are designed with a flexible <code>ONBUILD</code> feature, enabling the creation of specialized images pre-equipped with predefined asdf plugins.</p>"},{"location":"#overview","title":"Overview","text":""},{"location":"#base-image-structure","title":"Base Image Structure","text":"<p>The base image Dockerfile provided here serves as a fundamental building block. It includes essential configurations to set up <code>asdf-vm</code> along with necessary tools like Git, curl, and bash within an Linux environment. An <code>ONBUILD</code> directive is employed to facilitate the automatic installation of specified asdf plugins and versions when building new images based on this template.</p>"},{"location":"#utilising-toolset-images","title":"Utilising ToolSet Images","text":"<p>Examples of other Dockerfiles demonstrate how these base images can be utilized to construct specialized images for different tools or software stacks. By leveraging the base image and utilizing a docker-compose file, users can easily set up and install asdf plugins as per their requirements.</p> <p>To make this your own repository, you can fork this repo and update the following environment variables to your liking.</p> <pre><code># labels\nNAME=\"asdf-vm\"\nMAINTAINER=\"jrosco\"\nDESCRIPTION=\"asdf version manager toolset\"\nURL=\"https://github.com/jrosco/docker-container-asdf\"\nREPOSITORY=$URL\n\n# docker registries\nASDF_REGISTRY_BASE=\"ghcr.io/jrosco/$NAME\"\nASDF_REGISTRY_TOOLSET=\"$ASDF_REGISTRY_BASE-toolsets\"\n</code></pre> <p>An example is showcased using Helm packages within an Alpine Linux environment and other examples found in the toolset-docker-images directory.</p> <p>docker-compose.yml:</p> <pre><code>services:\n  alpine:\n        image: ghcr.io/jrosco/asdf-vm-toolsets/helm:alpine\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        asdf_image: \"ghcr.io/jrosco/asdf-vm:alpine\"\n        packages: \"helm helmfile helm-diff\"\n      platforms:\n        - \"linux/amd64\"\n</code></pre> <p>Example <code>Dockerfile</code> and build:</p> <pre><code>FROM ghcr.io/jrosco/asdf-vm:alpine\n</code></pre>"},{"location":"#build-the-image","title":"Build the image","text":"<pre><code>docker build \\\n    --build-arg \\\n    packages=\"awscli:latest:set helmfile:latest:set helm:latest:set kustomize:latest:set\" \\\n    -t helm-toolset:alpine .\n</code></pre>"},{"location":"#get-the-installed-package-versions-and-details","title":"Get the installed package versions and details","text":"<pre><code>docker run -it helm-toolset:alpine asdf info\ndocker run -it helm-toolset:alpine asdf current\n</code></pre>"},{"location":"#docker-build-arguments-build-arg","title":"Docker Build Arguments <code>--build-arg</code>","text":"<p>Each Dockerfile utilizes the following build arguments:</p> <ul> <li><code>asdf_image</code>: The base image to use for the build. This should be one of the base images provided in the base-images directory.</li> <li><code>packages</code>: A list of asdf plugins to install. These should be space-separated and match the names of the plugins in the asdf-community GitHub repository</li> </ul> <p><code>packages</code> support the following formats</p> Format Description <code>helm</code> Install the plugins repo details only (no versions downloaded) <code>helm:3.10.3</code> Install plugin (if not present) and download helm version <code>3.10.3</code> <code>helm:3.10.3:set</code> Install plugin (if not present) and download helm version <code>3.10.3</code> and set this as the default version in <code>.tool-versions</code> <code>helm:latest</code> Install plugin (if not present) and download latest version of <code>helm</code> <p>The <code>asdf_image</code>  and <code>packages</code> arguments are optional. If not provided, the build will default to installing the latest version of asdf and no plugins.</p>"},{"location":"#adding-your-own-tool-versions-file-on-build","title":"Adding Your Own <code>.tool-versions</code> File on Build","text":"<p>You can add your own <code>.tool-versions</code> file, for example:</p> <pre><code>package_name1 version_number\npackage_name2 version_number\n</code></pre> <p>Naming the file <code>.tool-versions</code> will automatically detect the file and <code>COPY</code> it to the image on build.</p> <p>To add a custom file (e.g., using a different name), you need to use the Docker <code>COPY</code> command and set ASDF's environment variable correctly:</p> <pre><code>WORKDIR /tmp/  # Only required if you want to put the file in a different location from the default `/asdf/`\nENV ASDF_DEFAULT_TOOL_VERSIONS_FILENAME=custom-tool-version\nCOPY custom-tool-version ./\nRUN bash /init/install-asdf-package\n</code></pre> <p>See the asdf reference for more details.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started, follow these steps:</p> <ol> <li>Clone the Repository: Clone this repository to your local environment.</li> <li>Explore Base Images: Navigate to the base-images directory to explore the base images available.</li> <li>Customize Dockerfiles: Review and customize the Dockerfiles provided in the base-images directory to suit your needs. Modify the <code>ONBUILD</code> directives, add or remove packages, and adjust versions as required.</li> <li>Build Specialized Images: Utilize the base images as templates to construct specialized images for your toolsets or software stacks. Refer to the provided examples and adjust the docker-compose files and build configurations according to your preferences.</li> <li>Run and Test: Once built, run the images in your environment and test to ensure proper functioning.</li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions to enhance or expand the existing base images or examples are welcome. Feel free to submit pull requests, suggest improvements, or report issues in the repository.</p>"},{"location":"#license","title":"License","text":"<p>GNU General Public License v3.0 or later</p> <p>See COPYING to see the full text.</p>"},{"location":"DEV/","title":"DEV","text":""},{"location":"DEV/#building-images","title":"Building images","text":""},{"location":"DEV/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>docker-compose</li> </ul>"},{"location":"DEV/#usage","title":"Usage","text":""},{"location":"DEV/#build-base-images","title":"Build Base Images","text":"<pre><code>make build\n</code></pre>"},{"location":"DEV/#build-toolset-images","title":"Build ToolSet Images","text":"<pre><code>make build-toolsets\n</code></pre>"},{"location":"TODO/","title":"TODO","text":"<ul> <li>Follow docker versioning similar to docker-node</li> <li>Look at adding a way to sign packages that support it</li> </ul> <pre><code>Could not set tfc-agent to version 1.14.0. Installing ...\nDownloading tfc-agent version 1.14.0 from https://releases.hashicorp.com/tfc-agent/1.14.0/tfc-agent_1.14.0_linux_amd64.zip\nSkipping verifying signatures and checksums either because gpg is not installed or explicitly skipped with ASDF_HASHICORP_SKIP_VERIFY\nCleaning tfc-agent previous binaries\n</code></pre> <ul> <li>Add a way / script to clean after installing a tool set</li> </ul>"}]}